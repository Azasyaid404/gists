:CmA: CommonAccord
:Cmorg: http://beta.commonaccord.org
:kv: key/value

:forteile: vorteile 

= Model Agt Frame


//graph
//table



[source,cypher]

----
CREATE (SpanF1 {key:'Agt._Body' ,value:'{Prologue}<ol><li>{Agt.Sec.S}</li></ol>{Agt.Signature}</br>{Agt.Attachment}'})

CREATE (SpanF2 {key:'Agt._Secs' ,value:'<ol><li>{Sec.Def}</li><li>{Sec.Deal}</li><li>{Sec.Term}</li><li>{Sec.Misc}</li></ol>'})
CREATE (SpanF2) -[:Extends]->(SpanF1)

CREATE (SpanF3 { key:'Misc._Sec' ,value:'<u>{Misc._Title}</u>. <ol><li>{Misc.Notice}</li><li>{Misc.Law}</li><li>{Misc.Forum}</li><li>{Misc.Entire}</li></ol>', extends:'Span2'})
CREATE (SpanF3) -[:Extends]->(SpanF2)

CREATE (SpanF4 {key:'Misc.Law._Sec' , value:'<u>Law</u>.  This agreement and any dispute relating to it shall be governed by the law of {Dispute.State.the}.'})
CREATE (SpanF4) -[:Extends]->(SpanF3)

CREATE (SpanF5 {key:'Prologue' , value:'{Pcpl.ID} and {Cttr.ID} hereby agree'})
CREATE (SpanF5) -[:Extends]->(SpanF4)


CREATE (SpanA1 {key:'(form)'})
CREATE (SpanA1) -[:UsesList]->(SpanF5)

CREATE (SpanA2 {key:'Pcpl.ID' , value:'Acme Inc., a Delaware corporation'})
CREATE (SpanA2) -[:Extends]->(SpanA1)


CREATE (SpanF6 {key:'Misc.Law._Sec' , value:'<u>Applicable Law</u>.  This Agreement and all disputes relating to it and the transactions contemplated by it are subject to {Dispute.State} law.'})
CREATE (SpanF6) -[:Extends]->(SpanF5)

CREATE (SpanA3 {key:'(form)'})
CREATE (SpanA3) -[:Extends]->(SpanA2)
CREATE (SpanA3) -[:UsesList]->(SpanF6)


WITH SpanA3
MATCH (k)<-[]-()
RETURN k.key as Key, k.value as Value
----


== Overview

The idea is to implement in a graph the list data model that is used in http://a.commonaccord.org/mediawiki/index.php/Main_Page
and deepened in some of the links references at http://beta.commonaccord.org.  

A list of key/values, where the value is either a span of html or the name of another list. 

A list can be understood as in Lisp - an item that prepends a shorter list, recursively.  That allows each bit of work to be seperately recorded.  



