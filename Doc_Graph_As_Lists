:CmA: CommonAccord
:Cmorg: http://beta.commonaccord.org
:kv: key/value

:forteile: vorteile 

= Model Agt Frame


//graph
//table



[source,cypher]

----
CREATE (SpanF1 {key:'Agt._Body' ,value:'{Prologue}<ol><li>{Agt.Sec.S}</li></ol>{Agt.Signature}</br>{Agt.Attachment}'})

CREATE (SpanF2 {key:'Agt._Secs' ,value:'<ol><li>{Sec.Def}</li><li>{Sec.Deal}</li><li>{Sec.Term}</li><li>{Sec.Misc}</li></ol>'})
CREATE (SpanF2) -[:Extends]->(SpanF1)

CREATE (SpanF3 { key:'Misc._Sec' ,value:'<u>{Misc._Title}</u>. <ol><li>{Misc.Notice}</li><li>{Misc.Law}</li><li>{Misc.Forum}</li><li>{Misc.Entire}</li></ol>', extends:'Span2'})
CREATE (SpanF3) -[:Extends]->(SpanF2)

CREATE (SpanF4 {key:'Misc.Law._Sec' , value:'<u>Law</u>.  This agreement and any dispute relating to it shall be governed by the law of {Dispute.State.the}.'})
CREATE (SpanF4) -[:Extends]->(SpanF3)

CREATE (SpanF5 {key:'Prologue' , value:'{Pcpl.ID} and {Cttr.ID} hereby agree'})
CREATE (SpanF5) -[:Extends]->(SpanF4)


CREATE (SpanA1 {key:'/form/'})
CREATE (SpanA1) -[:UsesList]->(SpanF5)





CREATE (P1 {KV:'Name.First=James<>Name.Last=Hazard<>twitter=Hazardj'})
CREATE (List1)
CREATE (Span1 {span:'{Prologue}<ol><li>{Agt.Sec.S}</li></ol>{Agt.Signature}</br>{Agt.Attachment}'})
CREATE (Span2 {span:'<ol><li>{Sec.Def}</li><li>{Sec.Deal}</li><li>{Sec.Term}</li><li>{Sec.Misc}</li></ol>'})
CREATE (Span3 {span:'<u>{Misc._Title}</u>. <ol><li>{Misc.Notice}</li><li>{Misc.Law}</li><li>{Misc.Forum}</li><li>{Misc.Entire}</li></ol>'}) 
CREATE (Span4 {span:'<u>Law</u>.  This agreement and any dispute relating to it shall be governed by the law of {Dispute.State.the}.'})
CREATE (Span5 {span:'Miscellaneous'})

CREATE (List1) -[:LISTS {key:'Doc.Body'}]->(Span1)

CREATE (List1) -[:LISTS {key:'Agt.Sec.S'}]->(Span2)
CREATE (List1) -[:LISTS {key:'Sec.Misc'}]->(Span3)
CREATE (List1) -[:LISTS {key:'Misc.Law'}]->(Span4)
CREATE (List1) -[:LISTS {key:'Misc._Title'}]->(Span5)

CREATE (List2 {name:'MIT.edu/otl/NDA_Mutual'})
CREATE (Span2_1 {span:'<ol><li>{Sec.Conf}</li><li>{Sec.Use}</li><li>{Sec.Care}</li><li>{Sec.Compelled}</li><li>{Sec.Disclaim.Warranty}</li><li>{Sec.Term}</li><li>{Sec.Remedy}</li><li>{Sec.Notice}</li><li>{Sec.Misc}</li></ol>'} )
CREATE (List2) -[:LISTS {key:'Agt.Sec.S.'}]->(Span2_1)
CREATE (P1) -[:LIKES]->(List1)
CREATE (P1) -[:LIKES]->(List2)

CREATE (DS1 {href:'http://web.mit.edu/tlo/www/misc/forms.html'})
CREATE (DS1)<-[:HOSTED]-(List2)

WITH Span1
MATCH (v)<-[k:LISTS]-()
RETURN k.key as Key, v.span as Value
----


== This Approach (A1)

This is an extremely atomized approach to spans.  

== Another Approach (A2)

A different one would put all the {kv}s into a single node, either as (A2.1) a single string (value:'key1=value1<>key2=value2') or as (A2.2) individual attributes ( {key1='value1', key2='value2'}). 

== Analysis (so to speak)

There are front parts and back parts ({forteile} und nachteile) for both A1 and A2 solutions.  A2 is like beta.{cma}.org.   A2.2  has the disadvantage that there appears to be no Cypher search that returns the list of attributes.

* BTW The AsciiDoc native "attribute" function at gist.neo4j seems fussier than at github.  (F1) Error if the attribute is defined after the use.  (F2) spacing -  (F2.1) new line and (F2.2) space following second colon.

* (@hazardj)-[:SUGGEST {text: 'If an attribute could contain a call for another attribute and formatting, we'd be mostly there.'}]->(@mojavelinux)

== Next Steps

Aggregate Lists and establish priority (recursive, depth-first) as among Spans with the same names.

@hazardj remembers how to do git coding locally instead of through github browser interface. 
